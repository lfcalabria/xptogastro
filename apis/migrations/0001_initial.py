# Generated by Django 4.2.13 on 2024-06-23 17:30

import apis.validators
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Aula',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('data_criacao', models.DateTimeField(auto_now_add=True, db_comment='Momento da criação do dado')),
                ('data_ateracao', models.DateTimeField(auto_now=True, db_comment='momento da atualização do dado')),
                ('ativo', models.BooleanField(db_comment='Indicador se o dado ainda está ativo', default=True)),
                ('usuario', models.CharField(editable=False, max_length=50)),
                ('data', models.DateField(db_comment='Data da aula')),
                ('turno', models.CharField(choices=[('M', 'Manhã'), ('T', 'Tarde'), ('V', 'Vespertino'), ('N', 'Noite'), ('I', 'Integral')], db_comment='Turno da aula', max_length=1)),
                ('qtd_aluno', models.IntegerField(db_comment='Número de alunos previsto', validators=[apis.validators.validate_not_zero])),
                ('confirmada', models.BooleanField(db_comment='Indicador se aula confirmada', default=False)),
                ('ministrada', models.BooleanField(db_comment='Indicador se aula ministrada', default=False)),
            ],
            options={
                'verbose_name': 'Aula',
                'verbose_name_plural': 'Aulas',
                'db_table': 'tbaula',
                'db_table_comment': 'Tabela para armazenar o registro das aulas',
                'ordering': ['data', 'turno', 'disciplina'],
            },
        ),
        migrations.CreateModel(
            name='AulaReceita',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('data_criacao', models.DateTimeField(auto_now_add=True, db_comment='Momento da criação do dado')),
                ('data_ateracao', models.DateTimeField(auto_now=True, db_comment='momento da atualização do dado')),
                ('ativo', models.BooleanField(db_comment='Indicador se o dado ainda está ativo', default=True)),
                ('usuario', models.CharField(editable=False, max_length=50)),
                ('qtd_receita', models.IntegerField(db_comment='Quantidade de receitas previstas para a aula', validators=[apis.validators.validate_not_zero])),
            ],
            options={
                'verbose_name': 'Receita da Aula',
                'verbose_name_plural': 'Receitas das Aulas',
                'db_table': 'tbaulareceita',
                'db_table_comment': 'Tabela associativa entre aula e receita',
            },
        ),
        migrations.CreateModel(
            name='Disciplina',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('data_criacao', models.DateTimeField(auto_now_add=True, db_comment='Momento da criação do dado')),
                ('data_ateracao', models.DateTimeField(auto_now=True, db_comment='momento da atualização do dado')),
                ('ativo', models.BooleanField(db_comment='Indicador se o dado ainda está ativo', default=True)),
                ('usuario', models.CharField(editable=False, max_length=50)),
                ('nome', models.CharField(db_comment='Nome da disciplina', max_length=100, unique=True)),
            ],
            options={
                'verbose_name': 'Disciplina',
                'verbose_name_plural': 'Disciplinas',
                'db_table': 'tbdisciplina',
                'db_table_comment': 'Tabelas com as disciplinas que têm aulas práticas do curso de gastronomia',
                'ordering': ['nome'],
            },
        ),
        migrations.CreateModel(
            name='Fornecedor',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('data_criacao', models.DateTimeField(auto_now_add=True, db_comment='Momento da criação do dado')),
                ('data_ateracao', models.DateTimeField(auto_now=True, db_comment='momento da atualização do dado')),
                ('ativo', models.BooleanField(db_comment='Indicador se o dado ainda está ativo', default=True)),
                ('usuario', models.CharField(editable=False, max_length=50)),
                ('nome', models.CharField(db_comment='Nome do fornecedor', max_length=100, unique=True)),
            ],
            options={
                'verbose_name': 'Fornecedor',
                'verbose_name_plural': 'Fornecedores',
                'db_table': 'tbfornecedor',
                'db_table_comment': 'Tabela com os fornecedores de insumo para as aulas práticas do curso de gastronomia',
                'ordering': ['nome'],
            },
        ),
        migrations.CreateModel(
            name='Produto',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('data_criacao', models.DateTimeField(auto_now_add=True, db_comment='Momento da criação do dado')),
                ('data_ateracao', models.DateTimeField(auto_now=True, db_comment='momento da atualização do dado')),
                ('ativo', models.BooleanField(db_comment='Indicador se o dado ainda está ativo', default=True)),
                ('usuario', models.CharField(editable=False, max_length=50)),
                ('nome', models.CharField(db_comment='Nome do produto', max_length=100, unique=True)),
                ('quantidade', models.DecimalField(db_comment='Quantidade disponível', decimal_places=5, default=0, max_digits=11)),
            ],
            options={
                'verbose_name': 'Produto',
                'verbose_name_plural': 'Produtos',
                'db_table': 'tbproduto',
                'db_table_comment': 'Tabela de produtos que são insumos para as aulas práticas do curso de gastronomia',
                'ordering': ['nome'],
            },
        ),
        migrations.CreateModel(
            name='Receita',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('data_criacao', models.DateTimeField(auto_now_add=True, db_comment='Momento da criação do dado')),
                ('data_ateracao', models.DateTimeField(auto_now=True, db_comment='momento da atualização do dado')),
                ('ativo', models.BooleanField(db_comment='Indicador se o dado ainda está ativo', default=True)),
                ('usuario', models.CharField(editable=False, max_length=50)),
                ('nome', models.CharField(db_comment='Nome do tipo de receita', max_length=100, unique=True)),
            ],
            options={
                'verbose_name': 'Receita',
                'verbose_name_plural': 'Receitas',
                'db_table': 'tbreceita',
                'db_table_comment': 'Receitas utilizadas nas aulas práticas do curso de gastronomia',
                'ordering': ['nome'],
            },
        ),
        migrations.CreateModel(
            name='UnidadeMedida',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('data_criacao', models.DateTimeField(auto_now_add=True, db_comment='Momento da criação do dado')),
                ('data_ateracao', models.DateTimeField(auto_now=True, db_comment='momento da atualização do dado')),
                ('ativo', models.BooleanField(db_comment='Indicador se o dado ainda está ativo', default=True)),
                ('usuario', models.CharField(editable=False, max_length=50)),
                ('sigla', models.CharField(db_comment='Sigla da unidade de medida', max_length=5, unique=True)),
                ('descricao', models.CharField(db_comment='Descrição da unidade de medida', max_length=100)),
            ],
            options={
                'verbose_name': 'Unidade de Medida',
                'verbose_name_plural': 'Unidades de Medida',
                'db_table': 'tbunidademedida',
                'db_table_comment': 'Unidade de medida dos produtos',
                'ordering': ['sigla'],
                'indexes': [models.Index(fields=['sigla'], name='tbunidademe_sigla_ed8790_idx')],
            },
        ),
        migrations.CreateModel(
            name='TipoCulinaria',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('data_criacao', models.DateTimeField(auto_now_add=True, db_comment='Momento da criação do dado')),
                ('data_ateracao', models.DateTimeField(auto_now=True, db_comment='momento da atualização do dado')),
                ('ativo', models.BooleanField(db_comment='Indicador se o dado ainda está ativo', default=True)),
                ('usuario', models.CharField(editable=False, max_length=50)),
                ('nome', models.CharField(db_comment='Nome do tipo de culinária', max_length=100, unique=True)),
            ],
            options={
                'verbose_name': 'Tipo de Culinária',
                'verbose_name_plural': 'Tipos de Culinária',
                'db_table': 'tbtipoculinaria',
                'db_table_comment': 'Tipos de culinária',
                'ordering': ['nome'],
                'indexes': [models.Index(fields=['nome'], name='tbtipoculin_nome_28b56f_idx')],
            },
        ),
        migrations.CreateModel(
            name='ReceitaProduto',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('data_criacao', models.DateTimeField(auto_now_add=True, db_comment='Momento da criação do dado')),
                ('data_ateracao', models.DateTimeField(auto_now=True, db_comment='momento da atualização do dado')),
                ('ativo', models.BooleanField(db_comment='Indicador se o dado ainda está ativo', default=True)),
                ('usuario', models.CharField(editable=False, max_length=50)),
                ('quantidade', models.DecimalField(db_comment='quantidade usada na receita por unidade de medida', decimal_places=5, max_digits=11, validators=[apis.validators.validate_not_zero])),
                ('produto', models.ForeignKey(db_comment='ligação com a tabela de produto', on_delete=django.db.models.deletion.RESTRICT, to='apis.produto')),
                ('receita', models.ForeignKey(db_comment='ligação com a tabela de receita', on_delete=django.db.models.deletion.RESTRICT, to='apis.receita')),
            ],
            options={
                'verbose_name': 'Ingrediente da Receita',
                'verbose_name_plural': 'Ingredientes da Receita',
                'db_table': 'tbreceitaproduto',
                'db_table_comment': 'Tabela associativa entre receita e produto',
            },
        ),
        migrations.AddField(
            model_name='receita',
            name='ingredientes',
            field=models.ManyToManyField(through='apis.ReceitaProduto', to='apis.produto'),
        ),
        migrations.AddField(
            model_name='receita',
            name='tipo',
            field=models.ForeignKey(db_comment='ligacao com a tabela de tipo de culinaria', on_delete=django.db.models.deletion.RESTRICT, related_name='tipoculinara', to='apis.tipoculinaria'),
        ),
        migrations.CreateModel(
            name='Professor',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('data_criacao', models.DateTimeField(auto_now_add=True, db_comment='Momento da criação do dado')),
                ('data_ateracao', models.DateTimeField(auto_now=True, db_comment='momento da atualização do dado')),
                ('ativo', models.BooleanField(db_comment='Indicador se o dado ainda está ativo', default=True)),
                ('usuario', models.CharField(editable=False, max_length=50)),
                ('nome', models.CharField(db_comment='Nome do professor', max_length=100)),
            ],
            options={
                'verbose_name': 'Professor',
                'verbose_name_plural': 'Professores',
                'db_table': 'tbprofessor',
                'db_table_comment': 'Professores das aulas práticas do curso de gastronomia',
                'ordering': ['nome'],
                'indexes': [models.Index(fields=['nome'], name='tbprofessor_nome_5a1d4a_idx')],
            },
        ),
        migrations.AddField(
            model_name='produto',
            name='receitas',
            field=models.ManyToManyField(through='apis.ReceitaProduto', to='apis.receita'),
        ),
        migrations.AddField(
            model_name='produto',
            name='unidade',
            field=models.ForeignKey(db_comment='ligação com tabela de unidade de medida', on_delete=django.db.models.deletion.RESTRICT, to='apis.unidademedida'),
        ),
        migrations.CreateModel(
            name='Preco',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('data_criacao', models.DateTimeField(auto_now_add=True, db_comment='Momento da criação do dado')),
                ('data_ateracao', models.DateTimeField(auto_now=True, db_comment='momento da atualização do dado')),
                ('ativo', models.BooleanField(db_comment='Indicador se o dado ainda está ativo', default=True)),
                ('usuario', models.CharField(editable=False, max_length=50)),
                ('data_cotacao', models.DateField(db_comment='Data Cotação', validators=[apis.validators.validate_not_in_future])),
                ('valor', models.DecimalField(db_comment='Valor cotado por unidade de medida', decimal_places=2, max_digits=9, validators=[apis.validators.validate_not_zero])),
                ('produto', models.ForeignKey(db_comment='ligação com tabela de produto', on_delete=django.db.models.deletion.RESTRICT, to='apis.produto')),
            ],
            options={
                'verbose_name': 'Preço',
                'verbose_name_plural': 'Preços',
                'db_table': 'tbpreco',
                'db_table_comment': 'Tabela para armazenar o histórico de cotações de preços dos produtos',
                'ordering': ['produto'],
            },
        ),
        migrations.CreateModel(
            name='NotaFiscal',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('data_criacao', models.DateTimeField(auto_now_add=True, db_comment='Momento da criação do dado')),
                ('data_ateracao', models.DateTimeField(auto_now=True, db_comment='momento da atualização do dado')),
                ('ativo', models.BooleanField(db_comment='Indicador se o dado ainda está ativo', default=True)),
                ('usuario', models.CharField(editable=False, max_length=50)),
                ('data_emissao', models.DateField(db_comment='Data de emissão da nota fiscal', validators=[apis.validators.validate_not_in_future])),
                ('numero', models.CharField(db_comment='Número da nota fiscal', max_length=50)),
                ('fornecedor', models.ForeignKey(db_comment='ligacao com a tabela de fornecedor', on_delete=django.db.models.deletion.RESTRICT, to='apis.fornecedor')),
            ],
            options={
                'verbose_name': 'Nota Fiscal',
                'verbose_name_plural': 'Notas Fiscais',
                'db_table': 'tbnotafiscal',
                'db_table_comment': 'Registro de notas fiscais de compra para as aulas práticas do curso de gastronomia',
                'ordering': ['data_emissao'],
            },
        ),
        migrations.CreateModel(
            name='Movimento',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('data_criacao', models.DateTimeField(auto_now_add=True, db_comment='Momento da criação do dado')),
                ('data_ateracao', models.DateTimeField(auto_now=True, db_comment='momento da atualização do dado')),
                ('ativo', models.BooleanField(db_comment='Indicador se o dado ainda está ativo', default=True)),
                ('usuario', models.CharField(editable=False, max_length=50)),
                ('tipo', models.CharField(choices=[('E', 'Entrada'), ('S', 'Saída'), ('A', 'Ajuste de auditoria'), ('D', 'Devolução')], db_comment='Tipo do movimento', max_length=1)),
                ('quantidade', models.DecimalField(db_comment='Quantidade movimentada', decimal_places=5, max_digits=9)),
                ('produto', models.ForeignKey(db_comment='Ligação com a tabela de produto', on_delete=django.db.models.deletion.RESTRICT, to='apis.produto')),
            ],
            options={
                'verbose_name': 'Movimento',
                'verbose_name_plural': 'Movimentos',
                'db_table': 'tbmovimento',
                'db_table_comment': 'Tabela para registro da movimentação de entrada e saída dos produtos ',
                'ordering': ['produto', 'tipo'],
            },
        ),
        migrations.CreateModel(
            name='Laboratorio',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('data_criacao', models.DateTimeField(auto_now_add=True, db_comment='Momento da criação do dado')),
                ('data_ateracao', models.DateTimeField(auto_now=True, db_comment='momento da atualização do dado')),
                ('ativo', models.BooleanField(db_comment='Indicador se o dado ainda está ativo', default=True)),
                ('usuario', models.CharField(editable=False, max_length=50)),
                ('nome', models.CharField(db_comment='Nome do laboratório', max_length=100, unique=True)),
                ('localizacao', models.CharField(db_comment='Localização do laboratório', max_length=100, unique=True)),
            ],
            options={
                'verbose_name': 'Laboratório',
                'verbose_name_plural': 'Laboratórios',
                'db_table': 'tblaboratorio',
                'db_table_comment': 'Laboratórios disponíveis para as aulas práticas do curso de gastronomia',
                'ordering': ['nome'],
                'indexes': [models.Index(fields=['nome'], name='tblaborator_nome_bc2132_idx')],
            },
        ),
        migrations.CreateModel(
            name='ItemNotaFiscal',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('data_criacao', models.DateTimeField(auto_now_add=True, db_comment='Momento da criação do dado')),
                ('data_ateracao', models.DateTimeField(auto_now=True, db_comment='momento da atualização do dado')),
                ('ativo', models.BooleanField(db_comment='Indicador se o dado ainda está ativo', default=True)),
                ('usuario', models.CharField(editable=False, max_length=50)),
                ('preco_unitario', models.DecimalField(db_comment='preço unitário do produto', decimal_places=2, max_digits=9)),
                ('quantidade', models.DecimalField(db_comment='Quantidade comprada', decimal_places=5, max_digits=11)),
                ('notafiscal', models.ForeignKey(db_comment='ligacao com a tabela de nota fiscal', on_delete=django.db.models.deletion.RESTRICT, to='apis.notafiscal')),
                ('produto', models.ForeignKey(db_comment='ligacao com a tabela de produtos', on_delete=django.db.models.deletion.RESTRICT, to='apis.produto')),
            ],
            options={
                'verbose_name': 'Item da Nota Fiscal',
                'verbose_name_plural': 'Itens da Notas Fiscais',
                'db_table': 'tbitemnotafiscal',
                'db_table_comment': 'Tabela associativa entre nota fiscal e produto',
                'ordering': ['notafiscal', 'produto'],
            },
        ),
        migrations.AddIndex(
            model_name='fornecedor',
            index=models.Index(fields=['nome'], name='tbfornecedo_nome_cdbe82_idx'),
        ),
        migrations.AddIndex(
            model_name='disciplina',
            index=models.Index(fields=['nome'], name='tbdisciplin_nome_34f0a2_idx'),
        ),
        migrations.AddField(
            model_name='aulareceita',
            name='aula',
            field=models.ForeignKey(db_comment='Ligação com a tabela de aula', on_delete=django.db.models.deletion.RESTRICT, to='apis.aula'),
        ),
        migrations.AddField(
            model_name='aulareceita',
            name='receita',
            field=models.ForeignKey(db_comment='Ligação com a tabela de receita', on_delete=django.db.models.deletion.RESTRICT, to='apis.receita'),
        ),
        migrations.AddField(
            model_name='aula',
            name='disciplina',
            field=models.ForeignKey(db_comment='Ligação com a tabela de disciplina', on_delete=django.db.models.deletion.RESTRICT, to='apis.disciplina'),
        ),
        migrations.AddField(
            model_name='aula',
            name='laboratorio',
            field=models.ForeignKey(db_comment='Ligação com a tabela de laboratorio', on_delete=django.db.models.deletion.RESTRICT, to='apis.laboratorio'),
        ),
        migrations.AddField(
            model_name='aula',
            name='professor',
            field=models.ForeignKey(db_comment='Ligação com a tabela de professor', on_delete=django.db.models.deletion.RESTRICT, to='apis.professor'),
        ),
        migrations.AddField(
            model_name='aula',
            name='receitas',
            field=models.ManyToManyField(through='apis.AulaReceita', to='apis.receita'),
        ),
        migrations.AddIndex(
            model_name='receitaproduto',
            index=models.Index(fields=['receita'], name='tbreceitapr_receita_a30a29_idx'),
        ),
        migrations.AddIndex(
            model_name='receitaproduto',
            index=models.Index(fields=['produto'], name='tbreceitapr_produto_7bd927_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='receitaproduto',
            unique_together={('receita', 'produto')},
        ),
        migrations.AddIndex(
            model_name='receita',
            index=models.Index(fields=['nome'], name='tbreceita_nome_4f5a26_idx'),
        ),
        migrations.AddIndex(
            model_name='receita',
            index=models.Index(fields=['tipo'], name='tbreceita_tipo_id_651c0d_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='receita',
            unique_together={('nome', 'tipo')},
        ),
        migrations.AddIndex(
            model_name='produto',
            index=models.Index(fields=['nome'], name='tbproduto_nome_c14a2c_idx'),
        ),
        migrations.AddIndex(
            model_name='produto',
            index=models.Index(fields=['unidade'], name='tbproduto_unidade_c585e3_idx'),
        ),
        migrations.AddIndex(
            model_name='preco',
            index=models.Index(fields=['produto'], name='tbpreco_produto_eadaa4_idx'),
        ),
        migrations.AddIndex(
            model_name='notafiscal',
            index=models.Index(fields=['fornecedor'], name='tbnotafisca_fornece_708047_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='notafiscal',
            unique_together={('fornecedor', 'numero')},
        ),
        migrations.AddIndex(
            model_name='movimento',
            index=models.Index(fields=['produto'], name='tbmovimento_produto_965445_idx'),
        ),
        migrations.AddIndex(
            model_name='itemnotafiscal',
            index=models.Index(fields=['notafiscal'], name='tbitemnotaf_notafis_e22ca0_idx'),
        ),
        migrations.AddIndex(
            model_name='itemnotafiscal',
            index=models.Index(fields=['produto'], name='tbitemnotaf_produto_0dfaef_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='itemnotafiscal',
            unique_together={('notafiscal', 'produto')},
        ),
        migrations.AddIndex(
            model_name='aulareceita',
            index=models.Index(fields=['aula'], name='tbaularecei_aula_id_6b80f4_idx'),
        ),
        migrations.AddIndex(
            model_name='aulareceita',
            index=models.Index(fields=['receita'], name='tbaularecei_receita_81cd94_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='aulareceita',
            unique_together={('aula', 'receita')},
        ),
        migrations.AddIndex(
            model_name='aula',
            index=models.Index(fields=['disciplina'], name='tbaula_discipl_ca6bc3_idx'),
        ),
        migrations.AddIndex(
            model_name='aula',
            index=models.Index(fields=['professor'], name='tbaula_profess_b79c75_idx'),
        ),
        migrations.AddIndex(
            model_name='aula',
            index=models.Index(fields=['laboratorio'], name='tbaula_laborat_8b1999_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='aula',
            unique_together={('data', 'turno', 'professor')},
        ),
    ]
